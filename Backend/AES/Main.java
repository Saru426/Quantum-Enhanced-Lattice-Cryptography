import org.bouncycastle.jcajce.SecretKeyWithEncapsulation;
import org.bouncycastle.jcajce.spec.KEMExtractSpec;
import org.bouncycastle.jcajce.spec.KEMGenerateSpec;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider;
import org.bouncycastle.pqc.jcajce.spec.KyberParameterSpec;
import org.bouncycastle.util.encoders.Hex;

import java.security.InvalidAlgorithmParameterException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Security;
import java.security.spec.AlgorithmParameterSpec;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.spec.SecretKeySpec;

public class Main {

    private static final String KEM_ALGORITHM = "Kyber";
    private static final AlgorithmParameterSpec KEM_PARAMETER_SPEC = KyberParameterSpec.kyber512;
    private static final String PROVIDER = "BCPQC";
    private static final String ENCRYPTION_ALGORITHM = "AES";
    private static final String MODE_PADDING = "AES/ECB/PKCS5Padding"; // ECB mode with PKCS5 padding

    public static String encrypt(String plainText, byte[] key) throws Exception {
        SecretKeySpec secretKey = new SecretKeySpec(key, ENCRYPTION_ALGORITHM);
        Cipher cipher = Cipher.getInstance(MODE_PADDING);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedBytes = cipher.doFinal(plainText.getBytes());
        return Base64.getEncoder().encodeToString(encryptedBytes);
    }

    public static String decrypt(String encryptedText, byte[] key) throws Exception {
        SecretKeySpec secretKey = new SecretKeySpec(key, ENCRYPTION_ALGORITHM);
        Cipher cipher = Cipher.getInstance(MODE_PADDING);
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decodedBytes = Base64.getDecoder().decode(encryptedText);
        byte[] decryptedBytes = cipher.doFinal(decodedBytes);
        return new String(decryptedBytes);
    }

    private static KeyPair generateKeyPair()
            throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException {
        //generate key pair
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KEM_ALGORITHM, PROVIDER);
        keyPairGenerator.initialize(KEM_PARAMETER_SPEC, new SecureRandom());
        return keyPairGenerator.generateKeyPair();
    }

    private static SecretKeyWithEncapsulation generateSecretKeySender(PublicKey publicKey)
            throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException {

        // You will request a key generator
        KeyGenerator keyGenerator = KeyGenerator.getInstance(KEM_ALGORITHM, PROVIDER);
        // You will set up a KEM Generate Spec with the public key
        KEMGenerateSpec kemGenerateSpec = new KEMGenerateSpec(publicKey, "Secret");
        // Now you can initialize the key generator with the kem generate spec and generate out share secret
        keyGenerator.init(kemGenerateSpec);
        return  (SecretKeyWithEncapsulation)keyGenerator.generateKey();
    }

    private static SecretKeyWithEncapsulation generateSecretKeyReciever(PrivateKey privateKey, byte[] encapsulation)
            throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException {

        // You will set up a KEM Extract Spec with the receiver private key - in this case you need the encapsulation
        // generated by the receiver as well.
        KEMExtractSpec kemExtractSpec = new KEMExtractSpec(privateKey, encapsulation, "Secret");

        // You will request a key generator
        KeyGenerator keyGenerator = KeyGenerator.getInstance(KEM_ALGORITHM, PROVIDER);
        // Now you can initialize the key generator with the kem extract spec and retrieve the KEM secret.
        keyGenerator.init(kemExtractSpec);

        return (SecretKeyWithEncapsulation)keyGenerator.generateKey();
    }

    public static void main(String[] var0) throws Exception {
        Security.addProvider(new BouncyCastleProvider());
        Security.addProvider(new BouncyCastlePQCProvider());
        KeyPair keyPair = generateKeyPair();

        PublicKey publicKey = keyPair.getPublic();
        PrivateKey privateKey = keyPair.getPrivate();

        System.out.println("Public Key: " + Base64.getEncoder().encodeToString(publicKey.getEncoded()));
        System.out.println("Private Key: " + Base64.getEncoder().encodeToString(privateKey.getEncoded()));

        System.out.println("KEM Algorithm: " + publicKey.getAlgorithm());
        System.out.println("Public Key length: " + publicKey.getEncoded().length);
        System.out.println("Private Key length: " + privateKey.getEncoded().length);

        SecretKeyWithEncapsulation secretKeySender = generateSecretKeySender(publicKey);
        byte[] encapsulatedKey = secretKeySender.getEncapsulation();

        System.out.println("Shared Secret created by Sender: " + Hex.toHexString(secretKeySender.getEncoded()));
        System.out.println("Length of encapsulated shared secret: " + encapsulatedKey.length);

        String originalText = "This is a secret message.";
        System.out.println("Original Text: " + originalText);

        String encryptedText = encrypt(originalText, secretKeySender.getEncoded());
        System.out.println("Encrypted Text: " + encryptedText);

        SecretKeyWithEncapsulation secretKeyReceiver = generateSecretKeyReciever(privateKey, encapsulatedKey);
        System.out.println("Shared Secret decapsulated by Receiver: " + Hex.toHexString(secretKeyReceiver.getEncoded()));

        String decryptedText = decrypt(encryptedText, secretKeyReceiver.getEncoded());
        System.out.println("Decrypted Text: " + decryptedText);
    }

}
